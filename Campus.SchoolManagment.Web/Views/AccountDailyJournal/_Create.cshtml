@model Campus.School.Management.Logic.BusinessLayer.ViewModel.AccountDailyJournalViewModel
@using Campus.School.Management.Logic.BusinessLayer
@using System.Web.Mvc;
@using Campus.School.Management.Logic.Resources
@using Campus.SchoolManagment.Web.Helper

<script src="~/Content/Scripts/jquery.validate.min.js"></script>
<script src="~/Content/Scripts/jquery.validate.unobtrusive.min.js"></script>


@using (Ajax.BeginForm("Create", "AccountDailyJournal", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "div-record", OnSuccess = "$('.close').click()", OnFailure = "toastr.error('Invalid Journal Entry. Check all entries and try again.')" }, new { @class = "ui journal form" }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(c => c.DailyJournalID)
    @*@Html.HiddenFor(c => c.SerialNo)*@
    @Html.HiddenFor(c => c.AttachedDocName)



    <div class="four inline  fields">
        <div class="four wide  field">
            @Html.LabelFor(model => model.SerialNo, htmlAttributes: new { @class = "control-label col-md-2" }) :

            @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control" } })

        </div>
        <div class=" three wide  field">
            @Html.LabelFor(model => model.JournalType, htmlAttributes: new { @class = "control-label col-md-2" })
            :

            @Html.DropDownFor(model => model.JournalType, ViewBag.JournalType1 as List<SemanticControls.DropdownList>, new { @class = " ui  dropdown ", @placeholder = "Select" })
            @Html.ValidationMessageFor(model => model.JournalType, "", new { @class = "text-danger" })


        </div>
        <div class=" four   wide field">
            @Html.LabelFor(model => model.DailyJournalDate, htmlAttributes: new { @class = "control-label col-md-2 ", @style = "width:150px" })
            <div class="ui small  input">
                @Html.EditorFor(model => model.DailyJournalDate, new { htmlAttributes = new { @class = "form-control form-control-inline jdate date-picker" , @autocomplete = "off"} })
                @Html.ValidationMessageFor(model => model.DailyJournalDate, "", new { @class = "text-danger" })
            </div>
        </div>


        @*<div class="field">
                @Html.LabelFor(model => model.DocumentNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.DocumentNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DocumentNumber, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="three wide field">
            <b>Upload</b>
            <div class="col-md-4">
                <input class="ui  button" type="button" name="uploader" value="Browse" style="    width: 60%;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;" />
            </div>
        </div>
    </div>
    <div class="ui horizontal divider">
        Journal Details
    </div>
    @Html.Partial("_DebitList", Model)



    <div class="three fields">

        @*<div class="field">
                @Html.LabelFor(model => model.DailyJournalDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.DailyJournalDate, new { htmlAttributes = new { @class = "form-control form-control-inline date-picker" } })
                    @Html.ValidationMessageFor(model => model.DailyJournalDate, "", new { @class = "text-danger" })
                </div>
            </div>*@



        @*<div class="field">
                @Html.LabelFor(model => model.BankCurrencyID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.BankCurrencyID, ViewBag.Currency as SelectList, "نوع العملة ", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BankCurrencyID, "", new { @class = "text-danger" })
                </div>
            </div>*@


    </div>
    @*<table class="ui  small table ">
            <thead>
                <tr>
                    <th></th>
                    <th class="text-center">@DailyJornal.Debit</th>
                    <th class="text-center">@DailyJornal.Credit</th>

                </tr>
            </thead>
            <tbody>
                <tr class="text-center">
                    <td class="center">
                        @GeneralResource.Total
                    </td>
                    <td class="text-center">

                        @Html.Editor("LsumDebit", new { htmlAttributes = new { @class = "form-control col-md-2", @readonly = "readonly" } })


                    </td>
                    <td class="text-center">
                        @Html.Editor("LsumCredit", new { htmlAttributes = new { @class = "form-control col-md-2", @readonly = "readonly" } })


                    </td>
                </tr>
                <tr>
                    <td class="text-center">@DailyJornal.differencebetweendebitandcredite</td>
                    <td colspan="2">

                        @Html.Editor("Difference", new { htmlAttributes = new { @class = "form-control col-md-2", @readonly = "readonly" } })

                    </td>

                </tr>
            </tbody>
        </table>*@
    <div class="ui divider"></div>

    <div class="two fields">

        <div class="field">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextAreaFor(model => model.Note, new { @class = "form-control " })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="field">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="actions">
        <button type="submit" id="Save" class="ui primary button "> @GeneralResource.Save</button>
        <button type="button" class="ui deny button">@GeneralResource.Close</button>

    </div>
}



@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")


}


<script>
    $(function () {
         InitC();

    })
    function InitC() {
        //$('.ui.journal.form').form({
        //    fields: {
        //        JournalType: 'empty'
        //    }
        //})
 $('.date-picker').datepicker({
     format: 'yyyy/mm/dd',
      todayHighlight: true
            });
        //$('.date-picker').datepicker({
        //    format: 'yyyy/mm/dd',
        //    endDate: "today",
        //    autoclose: true,
        //    todayHighlight: true

        //})
            //.on('changeDate', function (ev) {

           
        //        GetReferenceNo($('.jdate').val(), $('[name="SerialNo"]'));
            
        //});


        //$('.jdate').on('keyup  paste', function () {
        //    return false;
        //})

        //$('.jdate').on('change', function () {

        //    //console.log("kkks");
        //    var jdate = $(this).val();
        //    GetReferenceNo(jdate);
        //    //var $refNo = $('.refno'),
        //    //    refNo = $refNo.html(),
        //    //    Num = refNo.split("-")[0];

        //    //$refNo.html(Num + '-' + jdate);

        //})




    };
   


</script>

<script>
    var JournalUploader ;

    $("#Save").click(function (event) {

        var selected = localStorage.getItem('sum');
        var isValid = true;

        //if ($('input[name="folderName"]').val() !== '') {

        //    return true;
        //}

        //if ($('input[name="JournalType"]').val()==0 || $('input[name="JournalType"]').val()=="") {

        //      toastr.error("Select Journal Type")
        //    event.preventDefault();
        //    isValid = false;
        //}
        if ($('input[name="LsumDebit"]').val()==="" || $('input[name="LsumCredit"]').val()==="") {
            toastr.error("Journal Entry Cannot be Zero")
            event.preventDefault();
             isValid = false;
        }
        if ($($('.ui.accountSelect.dropdown')[0]).dropdown('get value') == "") {
            toastr.error("No Account Selected")
            event.preventDefault();
             isValid = false;

        }

        if (selected == "notequal") {

              toastr.error("@GeneralResource.DailyJournalequal")
            @*$("#demo").html("<p style='color:red'>@GeneralResource.ImageRequire</p>");*@

            event.preventDefault();
             isValid = false;

        }
        else
        {
            localStorage.clear();
        }

        if (JournalUploader.getQueueSize()==0) {

            return true
        }

        if (isValid) {
            JournalUploader.submit();
           event.preventDefault();
        };





    });


     initJournalUploader = function () {
        var $btn = $('input[name="uploader"]');

         var allowedExtensions = ['jpg', 'png'];

       JournalUploader = new ss.SimpleUpload({
            button: $btn,
            url: '/document/uploader',
            autoSubmit: false,
            allowedExtensions:allowedExtensions,
            name: 'uploadedFile',
            maxSize: 1024,
            data: { folderName: "journal" },
            onChange: function (filename, extension) {

                if (allowedExtensions.indexOf(extension) === -1) {
                    $btn
                        .attr('value', 'Browse')
                        .removeClass('green')
                        .addClass('red')

                    toastr.error("Invalid file type, upload file with jpg or png format.")
                    return false;
                } else {
                    $btn.attr('value', filename)
                    $btn
                        .removeClass('red')
                           .addClass('green')
                }
            },
            onSubmit: function (filename, extension) {

                $btn
                   .addClass(' loading')
            },
            onComplete: function (filename, response) {
                  $btn
                    .removeClass('green red loading')


                response = JSON.parse(response);

                if (!response.IsError) {
                    $('input[name="AttachedDocName"]').val(response.name);
                    $('#Save').submit();
                }

            },
            onExtError: function (filename, extension) {
                 $btn
                    .removeClass(' green')
                    .addClass('red');
                toastr.error("Invalid file type, upload file with jpg or png format.")
            },
              onSizeError: function (filename, extension) {
                 $btn
                    .removeClass(' green')
                      .addClass('red');

                toastr.error("The File Uploaded is too large.")
            },
        });

    }

     $(function () {
        initJournalUploader();

    });

</script>
