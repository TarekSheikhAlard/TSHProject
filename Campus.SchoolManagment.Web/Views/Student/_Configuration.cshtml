@model Campus.School.Management.Logic.BusinessLayer.ViewModel.AccStudentConfigViewModel
@using Campus.School.Management.Logic.BusinessLayer
@using System.Web.Mvc;
@using Campus.School.Management.Logic.Resources

@{
    long Ref_Id = ViewBag.Ref_Id;


}

<script src="~/Content/Scripts/jquery.validate.min.js"></script>
<script src="~/Content/Scripts/jquery.validate.unobtrusive.min.js"></script>
<div class="ui container">

    <div class=" ui pointing secondary blue menu">

        <a data-tab="tab_1_1" class="active item" data-toggle="tab">
            Student Fees
        </a>

        <a data-tab="tab_1_2" class="item" onclick="GetBusConfig(@Ref_Id);" data-toggle="tab">
            Bus Fees
        </a>




    </div>
    <div class="ui bottom active tab segment" data-tab="tab_1_1">
        @using (Ajax.BeginForm("Configuration", "Student", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "ConfigList", OnSuccess = "OnSuccessConfig()" }, new { @class = "ui small AddConfig form" }))
        {
            @Html.AntiForgeryToken()




            @*@Html.HiddenFor(model => model.Ref_Id)*@

            @Html.Hidden("Ref_Id1", Ref_Id, new { @Name = "Ref_Id" });


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="two fields">
                <div class="field">
                    @Html.LabelFor(model => model.FeeItemId, htmlAttributes: new { @class = "" })
                    @*<div class="col-md-4">
                            @Html.DropDownList("FeeItemId", null, htmlAttributes: new { @class = "ui search selection dropdown" })
                            @Html.ValidationMessageFor(model => model.FeeItemId, "", new { @class = "error" })
                        </div>*@
                    <div class="ui feetype search selection dropdown">
                        <input type="hidden" name="FeeItemId">
                        <i class="dropdown icon"></i>
                        <div class="default text">@GeneralResource.Select</div>
                        <div class="menu">

                        </div>
                    </div>

                </div>

                <div class="field">
                    @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "" })
                    </div>
                </div>

            </div>


            <div class="field">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "" })
                </div>
            </div>

            <div class="actions">
                <button type="submit" class="ui primary button " name="cmd">@*<i class="fa fa-check"></i>*@&nbsp;@GeneralResource.Save</button>
                <button type="button" class="ui deny button" data-dismiss="modal">@*<i class="fa fa-times"></i>*@&nbsp;@GeneralResource.Close</button>
            </div>

        }


    </div>

    <div class="ui bottom  tab segment" data-tab="tab_1_2">



        @using (Ajax.BeginForm("BusConfiguration", "Student", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "ConfigList", OnSuccess = "OnSuccessConfig()" }, new { @class = "ui small AddBusConfig form" }))
        {
            @Html.AntiForgeryToken()



            @Html.Hidden("Ref_Id2", Ref_Id, new { @Name = "Ref_Id" });

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="two fields">
                <div class="field">
                    <label>Select Bus</label>
                    <div class="col-md-4">
                        @Html.DropDownList("BusId", null, htmlAttributes: new { @class = "ui search selection dropdown", @onchange = "GetBusFees(this);" })
                    </div>

                </div>
                <div class="field">
                    <label>Select Trip</label>
                    <div class="inline fields">
                        <div class="field">
                            <div class="ui MorningTrip trip checkbox">

                                @Html.CheckBoxFor(x => x.MorningTrip)

                                <label>Morning</label>
                            </div>
                        </div>
                        <div class="field">
                            <div class="ui EveningTrip trip checkbox">
                                @Html.CheckBoxFor(x => x.EveningTrip)

                                <label>Evening</label>
                            </div>


                        </div>
                    </div>
                </div>


            </div>
            <div class="  two fields">

                <div class="field">
                    @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", @ID = "Discount-bus" } })
                        @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "" })
                    </div>
                </div>
                @*<div class="field">
                        @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control", @ID = "Tax-bus" } })
                            @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "" })
                        </div>
                    </div>*@

                <div class="field">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @ID = "Description-bus" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "" })
                    </div>
                </div>

            </div>



            <div class="actions">
                <button type="submit" class="ui primary button " name="cmd">@*<i class="fa fa-check"></i>*@&nbsp;@GeneralResource.Save</button>
                <button type="button" class="ui deny button" data-dismiss="modal">@*<i class="fa fa-times"></i>*@&nbsp;@GeneralResource.Close</button>
            </div>

        }
    </div>


</div>
<h4 class="ui dividing header">@GeneralResource.Configs</h4>


<div class="ui segment">
    <div id="ConfigList" data-load="1" class="ui placeholder fluid configlist">
        <div class="image"></div>
    </div>
</div>




@*@Html.Partial("_ConfigurationList", Model)*@



@section Scripts {


    @Scripts.Render("~/bundles/jqueryval")
}



<script>

    $(function () {
          $('.menu .item')
            .tab()
            ;
        $('.ui.trip.checkbox').checkbox({
            onChange: function () {
                var $elem = $(this),
                    trip = $('.ui.trip.checkbox.checked').length,
                    $form = $(".AddBusConfig.form"),
                    fees = Bus.Fees;
                  console.log($elem)
                $form.find("#Amount-bus").val("");

                console.log(trip);

                //bug fix razor and semantic ui
                $('input[type="hidden"][name="MorningTrip"],input[type="hidden"][name="EveningTrip"]').remove();

                if (fees.hasOwnProperty("BusID")) {

                    switch (trip) {
                        case 1:
                            fees.SingleTripCost !== null
                                && fees.SingleTripCost !== "" ?
                                $form.find("#Amount-bus").val(parseFloat(fees.SingleTripCost)) : toastr.error("One Way Trip Fee information not available");

                            break;
                        case 2:
                            fees.DoubleTripCost !== null
                                && fees.DoubleTripCost !== "" ?
                                $form.find("#Amount-bus").val(parseFloat(fees.DoubleTripCost)) : toastr.error("Two Way Trip Fee information not available");

                            break;
                        default:
                            break;
                    }
                }
                else {
                    toastr.error("Fees information not available");
                }

            }
        })
            ;
        $('#Ref_Id').val('@ViewBag.Ref_Id');

         getFeeDropdownList('@ViewBag.Ref_Id')


    });



    function getConfigList(ID) {
        
        $.ajax({
            type: "Get",
            url: '/Student/GetConfigList/'+ID,
            success: function (response) {

                $('#ConfigList')
                    .empty()
                    .removeClass('placeholder')
                    .attr('data-load','0')
                    .html(response);


            }
        });
    }
    function getFeeDropdownList(ID) {
        var $dropdown = $('.ui.feetype.dropdown');
       $dropdown.addClass('loading')
        $.ajax({
            type: "Get",
            dataType:"JSON",
            url: '/Student/FeeDropdownList/'+ID,
            success: function (response) {

                $('.ui.feetype.dropdown')
                    .dropdown({ values: response });
                
            },
            complete: function () {    $dropdown.removeClass('loading')}

        });
    }


    function OnSuccessConfig(response) {

      toastr.success("@GeneralResource.toastrSave");

         //  getConfigList('@ViewBag.StudentAcdID');

            getFeeDropdownList('@ViewBag.Ref_Id')


        $('.AddConfig.form input[type="text"]').val("");
       // $('.AddBusConfig.form input[type="text"]').val("");
    }

</script>

<script>
    if ($('#ConfigList').attr('data-load') == 1) {

                getConfigList('@ViewBag.Ref_Id')
            }

</script>
