@model Campus.School.Management.Logic.BusinessLayer.ViewModel.EmployeeVacationViewModel


@using Campus.School.Management.Logic.Resources

<script src="~/Content/Scripts/jquery.validate.min.js"></script>
<script src="~/Content/Scripts/jquery.validate.unobtrusive.min.js"></script>



@using (Ajax.BeginForm("EmployeeVacation", "Employee", new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnSuccessEmployeeVacation" }, new { @class = "ui EmployeeVacation form" }))

{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.Employee_ID)


<div class="two fields">
    <div class="field">
        @Html.LabelFor(model => model.OperationDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="ui input ">
            @Html.EditorFor(model => model.OperationDate, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker",@placeholder="First Select Operation Date" } })
            @Html.ValidationMessageFor(model => model.OperationDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.HolidayTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="ui input">
            @Html.DropDownListFor(model => model.HolidayTypeId, ViewBag.HolidayType as SelectList, "select", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.HolidayTypeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.DateOfVacation, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="ui input">
            @Html.EditorFor(model => model.DateOfVacation, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker"} })
            @Html.ValidationMessageFor(model => model.DateOfVacation, "", new { @class = "text-danger" })
        </div>
    </div>


</div>
<div class="three fields">
    <div class="field">
        @Html.LabelFor(model => model.LastWorkingDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="ui input">
            @Html.EditorFor(model => model.LastWorkingDate, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
            @Html.ValidationMessageFor(model => model.LastWorkingDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.ContactOnVacation, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ContactOnVacation, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ContactOnVacation, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="field">
        @Html.LabelFor(model => model.EmployeeInCharge, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="ui input">
            @Html.DropDownListFor(model => model.EmployeeInCharge, ViewBag.Employee as SelectList, "select", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.EmployeeInCharge, "", new { @class = "text-danger" })
        </div>
    </div>

</div>

<div class=" four fields">



    <div class="field">
        @Html.LabelFor(model => model.BasicSalary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BasicSalary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BasicSalary, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.AdditionalSalary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AdditionalSalary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AdditionalSalary, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.AllowanceSalary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AllowanceSalary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AllowanceSalary, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.BonusesSalary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BonusesSalary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BonusesSalary, "", new { @class = "text-danger" })
        </div>
    </div>



</div>


<div class="three fields">

    <div class="field">
        @Html.LabelFor(model => model.extraSalary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.extraSalary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.extraSalary, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.TotalSalary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TotalSalary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TotalSalary, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.Dedecation, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Dedecation, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Dedecation, "", new { @class = "text-danger" })
        </div>
    </div>



</div>

<div class="four fields">

    <div class="field">
        @Html.LabelFor(model => model.TotalDedecated, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TotalDedecated, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TotalDedecated, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.NetSalary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NetSalary, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NetSalary, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.AllowanceSalary2, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AllowanceSalary2, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AllowanceSalary2, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.AllowanceSalary3, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AllowanceSalary3, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AllowanceSalary3, "", new { @class = "text-danger" })
        </div>
    </div>



</div>

<div class="three fields">

    <div class="field">
        @Html.LabelFor(model => model.Transitionallowance, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Transitionallowance, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Transitionallowance, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.Subsistenceallowance, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Subsistenceallowance, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Subsistenceallowance, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.conditionsworkallowance, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.conditionsworkallowance, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.conditionsworkallowance, "", new { @class = "text-danger" })
        </div>
    </div>


</div>

<div class="two fields">


    <div class="field">
        @Html.LabelFor(model => model.sumallowance, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.sumallowance, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.sumallowance, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.paymentsalariesway, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.paymentsalariesway, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.paymentsalariesway, "", new { @class = "text-danger" })
        </div>
    </div>


</div>

    <div class="actions">
        <button type="submit" class="ui primary button " name="cmd">@*<i class="fa fa-check"></i>*@&nbsp;@GeneralResource.Save</button>
        <button type="button" class="ui deny button" data-dismiss="modal">@*<i class="fa fa-times"></i>*@&nbsp;@GeneralResource.Close</button>
    </div>

}

<script>

    $(function () {
      
            $('.date-picker').datepicker({
                format: 'yyyy/mm/dd'

            });

    

        $("#OperationDate").change(function () {
           
            if ($("#OperationDate").val() == "") {  
                
                toastr.error("please  Select date First ");
            }
            else {
                $.ajax({
                    type: "POST",
                    url: '/AccountEmployeesMonthlySalary/EmployeeSalaryDetails',
                    dataType: "json",
                    data: { Employee_ID: $("#Employee_ID").val(), OperationDate: $("#OperationDate").val() },
                    success: function (data) {
                        if (data == "") {
                            alert("employee not have salary Information ");
                            $('#Employee_ID').get(0).selectedIndex = 0;
                            $('#JobID').val("");
                            $('#JobName').val("");
                            $('#BasicSalary').val("");
                            $('#AdditionalSalary').val("");
                            $('#BonusesSalary').val("");
                            $('#AllowanceSalary').val("");
                            $('#extraSalary').val("");
                            $('#TotalSalary').val("");
                            $('#Socialinsurance').val("");
                            $('#Medicalinsurance').val("");
                            $('#Taxes').val("");
                            $('#Dedecation').val("");
                            $('#TotalDedecated').val("");
                            $('#NetSalary').val("");


                        }
                        else {
                            debugger;
                            $('#JobID').val(data.JobID);
                            $('#JobName').val(data.JobName);
                            $('#BasicSalary').val(data.BasicSalary);
                            $('#AdditionalSalary').val(data.AdditionalSalary);
                            $('#BonusesSalary').val(data.BonusesSalary);
                            $('#AllowanceSalary').val(data.AllowanceSalary);
                            $('#extraSalary').val(data.extraSalary);
                            $('#TotalSalary').val(data.TotalSalary);
                            $('#Socialinsurance').val(data.Socialinsurance);
                            $('#Medicalinsurance').val(data.Medicalinsurance);
                            $('#Taxes').val(data.Taxes);
                            $('#Dedecation').val(data.Dedecation);
                            $('#TotalDedecated').val(data.TotalDedecated);
                            $('#NetSalary').val(data.NetSalary);
                            $('#AccountNumber').val(data.AccountNumber);
                            $('#accommodationallowanc').val(data.accommodationallowanc);
                            $('#Subsistenceallowance').val(data.Subsistenceallowance);
                            $('#AllowanceSalary3').val(data.AllowanceSalary3);
                            $('#AllowanceSalary2').val(data.AllowanceSalary2);
                            $('#Subsistenceallowance').val(data.Subsistenceallowance);
                            $('#Drivingallowance').val(data.Drivingallowance);
                            $('#Transitionallowance').val(data.Transitionallowance);
                            $('#conditionsworkallowance').val(data.conditionsworkallowance);



                            var sumTotalSalary = parseInt("0" + $('#conditionsworkallowance').val())
                                + parseInt("0" + $('#Transitionallowance').val())
                                + parseInt("0" + $('#Drivingallowance').val())
                                + parseInt("0" + $('#Subsistenceallowance').val())
                                + parseInt("0" + $('#accommodationallowanc').val())
                                + parseInt("0" + $('#AllowanceSalary').val())
                                + parseInt("0" + $('#AllowanceSalary2').val())
                                + parseInt("0" + $('#AllowanceSalary3').val())
                                + parseInt("0" + $('#extraSalary').val());
                            $('#sumallowance').val(sumTotalSalary);
                        }
                    }
                });
            }

        });


    })

    function OnSuccessEmployeeVacation(data) {


    if (data) {
        toastr.success("@GeneralResource.toastrSave")
        $('#ChangeSponsor-Model .close').click()

    } else {
          toastr.error("@GeneralResource.toastrOperationFaild")
    }
};
</script>