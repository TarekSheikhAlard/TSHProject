@model Campus.School.Management.Logic.BusinessLayer.ViewModel.EmployeeViewModel
@using Campus.School.Management.Logic.BusinessLayer
@using System.Web.Mvc;
@using Campus.School.Management.Logic.Resources

<script src="~/Content/Scripts/jquery.validate.min.js"></script>
<script src="~/Content/Scripts/jquery.validate.unobtrusive.min.js"></script>

@using (Html.BeginForm())
{
    <div class="ui form">

        <div class=" two fields">
            <div class="field">
                @Html.LabelFor(model => model.ImgUrl, htmlAttributes: new { @class = "control-label col-md-2  " })
                <div class="ui action input">
                    <input id="uploadFile" disabled="disabled" />

                    <label for="file_upload" class="ui primary button">  @GeneralResource.upload</label>
                </div>
            </div>
            <div class="field">
                <img id="display" class="ui tiny image" src="@Url.Content(@Statistics.StudentImagesPath+Model.ImgUrl)" alt="" />
            </div>

        </div>
        <input id="file_upload" src="#" style="visibility:hidden;display:none" type="file" name="file_upload" required>
    </div>

}


@using (Ajax.BeginForm("Edit", "Employee", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "div-record", OnSuccess = "$('.close').click()" }, new { @class = "ui editEmployee form" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ImgUrl)
    @Html.HiddenFor(c => c.IsNew)
    @Html.HiddenFor(c => c.Employee_ID)
    @*@Html.HiddenFor(c=>c.Mail)*@
    <div class=" ">
        <div class="four fields">

            <div class="field">
                @Html.LabelFor(model => model.DepartmentName, htmlAttributes: new { @class = "" })

             
                @Html.EditorFor(model => model.DepartmentName, new { htmlAttributes = new { @class = "form-control", @readonly = true, @onclick= "SearchDepartment()" } })

                <input name="DepartmentTreeID" type="hidden" />

            </div>

            <div class="field">

                @Html.LabelFor(model => model.jobID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.jobID, ViewBag.Jobs as SelectList, GeneralResource.Select, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.jobID, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="field">
                @Html.LabelFor(model => model.NameAr, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.NameAr, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NameAr, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="field">
                @Html.LabelFor(model => model.NameEn, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.NameEn, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NameEn, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        @*<div class="two fields">


            </div>*@
        <div class="three fields">
            <div class="field">

                @Html.LabelFor(model => model.sex, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="">
                    @Html.DropDownListFor(model => model.sex, new SelectList(new List<Object>
                       {
                       new { value = "Male" , text =GeneralResource.Male },
                       new { value = "Female" , text =GeneralResource.Female}}, "value", "text"), GeneralResource.Select, new { @class = "ui dropdown" })
                    @Html.ValidationMessageFor(model => model.sex, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="field">

                @Html.LabelFor(model => model.religion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.religion, new SelectList(new List<Object>
                       {
                       new { value = "Muslim" , text =GeneralResource.Muslim},
                       new { value = "Christian" , text =GeneralResource.Christian},
                       new { value = "Others", text = GeneralResource.Others}
                       }, "value", "text"), GeneralResource.Select, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.religion, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="field">
                @Html.LabelFor(model => model.NationalityID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.NationalityID, ViewBag.NationalityID as SelectList, GeneralResource.Select, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.NationalityID, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="four fields">

            <div class="field">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.Tel, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Tel, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Tel, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.Mail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Mail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Mail, "", new { @class = "text-danger" })
                    <p id="EmailDiv"></p>
                </div>
            </div>

        </div>
        <div class="two fields">
            <div class="field">
                @Html.LabelFor(model => model.BirthPlace, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.BirthPlace, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BirthPlace, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="field">
                @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
                    @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="two fields">

            <div class="field">

                @Html.LabelFor(model => model.Educationallevel, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Educationallevel, new SelectList(new List<Object>
                       {
                       new { value = "HighSchool" , text =GeneralResource.HighSchool},
                       new { value = "bachelorsdegree" , text =GeneralResource.bachelorsdegree},
                       new { value = "mastersdegree", text =GeneralResource.mastersdegree},
                       new { value = "Doctorate", text = GeneralResource.Doctorate},
                       new { value = "Others", text = GeneralResource.Others}
                       }, "value", "text"),GeneralResource.Select ,new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Educationallevel, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="field">
                @Html.LabelFor(model => model.scientificcertificate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.scientificcertificate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.scientificcertificate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="four fields">

            <div class="field">
                @Html.LabelFor(model => model.National_ID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.National_ID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.National_ID, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="field">
                @Html.LabelFor(model => model.pleaceNational_ID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.pleaceNational_ID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.pleaceNational_ID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.ReleaseNational_ID_date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.ReleaseNational_ID_date, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
                    @Html.ValidationMessageFor(model => model.ReleaseNational_ID_date, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.EndNational_ID_date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.EndNational_ID_date, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
                    @Html.ValidationMessageFor(model => model.EndNational_ID_date, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="two fields">

            <div class="field">
                @Html.LabelFor(model => model.passportNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.passportNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.passportNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="field">
                @Html.LabelFor(model => model.passportpleace, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.passportpleace, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.passportpleace, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="field">
                @Html.LabelFor(model => model.Releasepassport_date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.Releasepassport_date, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
                    @Html.ValidationMessageFor(model => model.Releasepassport_date, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="field">
                @Html.LabelFor(model => model.Endpassport_date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.Endpassport_date, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
                    @Html.ValidationMessageFor(model => model.Endpassport_date, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="three fields">

            <div class="field">

                @Html.LabelFor(model => model.Maritalstatus, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.Maritalstatus, new SelectList(new List<Object>
                       {
                       new { value = "single" , text =GeneralResource.single},
                       new { value = "Married" , text =GeneralResource.Married},
                       new { value = "Widower", text = GeneralResource.Widower },
                       new { value = "divorced", text = GeneralResource.divorced }
                       }, "value", "text"), GeneralResource.Select, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Maritalstatus, "", new { @class = "ui dropdown" })
                </div>

            </div>
            <div class="field">
                @Html.LabelFor(model => model.childNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.childNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.childNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="field">
                @Html.LabelFor(model => model.companionscount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.companionscount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.companionscount, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="four fields">
            <div class="field">
                @Html.LabelFor(model => model.EmployeeNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EmployeeNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeNumber, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.WorkDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.WorkDate, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
                    @Html.ValidationMessageFor(model => model.WorkDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.ContractDuration, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.ContractDuration, new { htmlAttributes = new { @class = "form-control form-control-inline date-picker" } })
                    @Html.ValidationMessageFor(model => model.ContractDuration, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="field">
                @Html.LabelFor(model => model.JoblicenseNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.JoblicenseNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.JoblicenseNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="three fields">

            <div class="field">
                @Html.LabelFor(model => model.visaNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.visaNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.visaNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="field">
                @Html.LabelFor(model => model.visadate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.visadate, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
                    @Html.ValidationMessageFor(model => model.visadate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.visajob, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.visajob, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.visajob, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="three fields">
            <div class="field">
                @Html.LabelFor(model => model.EnteranceDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="ui input">
                    @Html.EditorFor(model => model.EnteranceDate, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
                    @Html.ValidationMessageFor(model => model.EnteranceDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="field">
                @Html.LabelFor(model => model.EnteranceBorder, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EnteranceBorder, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EnteranceBorder, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="field">
                @Html.LabelFor(model => model.NumberEnterBorder, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.NumberEnterBorder, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NumberEnterBorder, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="three fields">

            <div class="field">
                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })

                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })

            </div>
            <div class=" field">
                @Html.LabelFor(model => model.EmployeeStatus, htmlAttributes: new { @class = "control-label col-md-2" })

                @Html.EditorFor(model => model.EmployeeStatus, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmployeeStatus, "", new { @class = "text-danger" })

            </div>


        </div>
    </div>


    <div class="actions">
        <button type="submit" id="Save" class="ui primary button " name="cmd">@*<i class="fa fa-check"></i>*@&nbsp;@GeneralResource.Save</button>
        <button type="button" class="ui deny button" data-dismiss="modal">@*<i class="fa fa-times"></i>*@&nbsp;@GeneralResource.Close</button>

    </div>

}


@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")


}
<script>
    function InitE() {
        $('#jobID').val(@Model.jobID);
        $('#NationalityID').val(@Model.NationalityID);
        $('.date-picker').datepicker({
            format: 'yyyy/mm/dd'

        });

    };
    InitE();
        document.getElementById("file_upload").onchange = function () {

            document.getElementById("uploadFile").value = this.value;
            document.getElementById("display").src = window.URL.createObjectURL(this.files[0]);

        };
            $("#file_upload").change(function ()
            {
                $("#demo").html("");

                var fileData = new FormData();

                var img = $("#file_upload").get(0).files;

                debugger;
                fileData.append("ImageFile", img[0]);
                $.ajax({
                    type: "Post",
                    url: '/Employee/AddImage/',
                    data: fileData,
                    contentType: false,
                    processData: false,
                    success: function (response) {


                    }
                });


            });


</script>

<script>
    $(function () {
        $('.editEmployee.form div.field input[name="DepartmentTreeID"]').change(function () {
            //This event will not trigger untill you add a trigger.
            //trigger has been added in _departmentTree.cshtml on ok click

            GetJob(this.value)
        })

    });

    function GetJob(id) {
        debugger;
        var selectedValue = id;
        $.ajax({
            url: '/Employee/GetJOBS',
            type: "POST",
            data: { id: selectedValue },
            error: function (xhr, ajaxOptions, thrownError) {

                var jobID = $('#jobID');
                jobID.empty();
                jobID.append(
                    $('<option/>', {
                        value: "",
                        html: "Select"
                    })
                );

            },
            success: function (result) {
                var jobID = $('#jobID');
                jobID.empty();
                jobID.append(
                    $('<option/>', {
                        value: "",
                        html: "Select"
                    })
                );
                $.each(result, function () {
                    debugger;
                    jobID.append(
                        $('<option/>', {
                            value: this.JobID,
                            html: getLanguage() == 'ar' ? this.JobNameAr : this.JobNameEn
                        })
                    );
                });
            }
        });
    };

</script>
