@model Campus.School.Management.Logic.BusinessLayer.ViewModel.AccountAssetViewModel
@using Campus.School.Management.Logic.Resources

<script src="~/Content/Scripts/jquery.validate.min.js"></script>
<script src="~/Content/Scripts/jquery.validate.unobtrusive.min.js"></script>

@using (Ajax.BeginForm("Create", "AccountAsset", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "div-record-asset", OnSuccess = "$('.close').click()" }, new { @class = "ui form" }))
{@Html.AntiForgeryToken()



@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<div class="two fields">
    <div class="field">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.NameAr, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.NameAr, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NameAr, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="three fields">
    <div class="field">
        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="field">
        @Html.LabelFor(model => model.AccountTreeID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(model => model.AccountTreeID, ViewBag.Tree as SelectList, "Select", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.AccountTreeID, "", new { @class = "text-danger" })
        </div>
    </div>*@

    <div class="field">
        @Html.LabelFor(model => model.PurchaseDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="ui input">
            @Html.EditorFor(model => model.PurchaseDate, new { htmlAttributes = new { @class = "form-control form-control-inline  date-picker" } })
            @Html.ValidationMessageFor(model => model.PurchaseDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
@*<div class="two fields">

   

    <div class="field">
        @Html.LabelFor(model => model.DepartmentID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(model => model.DepartmentID, ViewBag.DepartmentID as SelectList, "Select", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DepartmentID, "", new { @class = "text-danger" })
        </div>
    </div>

</div>*@
<div class="two fields">
  
    <div class="field" @*onclick="SearchAccount('expense')"*@>

        @Html.LabelFor(model => model.AccountExpenseID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @*@Html.EditorFor(model => model.AccountExpenseName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.HiddenFor(model => model.AccountExpenseID)*@


            <div class="ui accountSelect search fluid selection dropdown" data-filter="10">
                <div name="AccountExpenseName" class="text"></div>
                @Html.HiddenFor(model => model.AccountExpenseID)
                <i class="dropdown icon"></i>
            </div>
            @Html.ValidationMessageFor(model => model.AccountExpenseID, "", new { @class = "text-danger" })

        </div>



    </div>

    <div class="field" @*onclick="SearchAccount('accumulated')"*@>

        @Html.LabelFor(model => model.AccountAccumulatedID, htmlAttributes: new { @class = "control-label col-md-2" })
       
        <div class="col-md-3">
            @*@Html.EditorFor(model => model.AccountAccumulatedName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.HiddenFor(model => model.AccountAccumulatedID)*@

            <div class="ui accountSelect search fluid selection dropdown" >
                <div name="AccountAccumulatedName" class="text"></div>
                @Html.HiddenFor(model => model.AccountAccumulatedID)
                <i class="dropdown icon"></i>
            </div>
            @Html.ValidationMessageFor(model => model.AccountAccumulatedID, "", new { @class = "text-danger" })
        </div>

    </div>

</div>
<div class="three fields">
    <div class="field" onclick="SearchAsset()">

        @Html.LabelFor(model => model.AssetTreeID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.AssetNameEN, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.HiddenFor(model => model.AssetTreeID)
            @Html.ValidationMessageFor(model => model.AssetTreeID, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="field">
        @Html.LabelFor(model => model.depreciationYears, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.depreciationYears, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.depreciationYears, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.depreciationRate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.depreciationRate, new { htmlAttributes = new { @class = "form-control", placeholder = "%..." } })
            @Html.ValidationMessageFor(model => model.depreciationRate, "", new { @class = "text-danger" })

        </div>
    </div>
</div>
<div class="two fields">
    <div class="field">
        @Html.LabelFor(model => model.depreciationType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(model => model.depreciationType, new SelectList(new List<Object>
                   {
                   new { value = "Fixeddepreciation" , text = "Fixed depreciation"  },
                   new { value = "Diminishdepreciation" , text = "Diminish depreciation"}}, "value", "text"),"select", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.depreciationType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="field">
        @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="actions">
    <button type="submit" class="ui primary button " name="cmd"> @GeneralResource.Save</button>
    <button type="button" class="ui deny button" data-dismiss="modal">@*<i class="fa fa-times"></i>*@&nbsp;@GeneralResource.Close</button>
</div>

}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
      $(function () {
        InitC();
        semantic.accountQuickBox();
    })
    function InitC() {


        $('.date-picker').datepicker({
            format: 'yyyy/mm/dd'
        });

    };
   

</script>
