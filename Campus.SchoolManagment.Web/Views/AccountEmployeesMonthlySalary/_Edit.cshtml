@model Campus.School.Management.Logic.BusinessLayer.ViewModel.AccountEmployeesMonthlySalaryViewModel

@using Campus.School.Management.Logic.Resources

<script src="~/Content/Scripts/jquery.validate.min.js"></script>
<script src="~/Content/Scripts/jquery.validate.unobtrusive.min.js"></script>

@using (Ajax.BeginForm("Edit", "AccountEmployeesMonthlySalary", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "div-record", OnSuccess = "$('.close').click()" }, new { @class = "ui small form" }))
{
    @Html.AntiForgeryToken()



    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.Employee_ID)
    @Html.HiddenFor(model => model.JobID)

    <div class="two fields">
        <div class="field">
            @Html.LabelFor(model => model.EmployeeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="field">
            @Html.LabelFor(model => model.JobName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.JobName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.JobName, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="two fields">
        <div class="field">
            @Html.LabelFor(model => model.BasicSalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.BasicSalary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BasicSalary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="field">
            @Html.LabelFor(model => model.AdditionalSalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.AdditionalSalary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AdditionalSalary, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="two fields">
        <div class="field">
            @Html.LabelFor(model => model.AllowanceSalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.AllowanceSalary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AllowanceSalary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="field">
            @Html.LabelFor(model => model.BonusesSalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.BonusesSalary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BonusesSalary, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="two fields">
        <div class="field">
            @Html.LabelFor(model => model.extraSalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.extraSalary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.extraSalary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="field">
            @Html.LabelFor(model => model.TotalSalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.TotalSalary, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.TotalSalary, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="two fields">
        <hr />
        <div class="field">
            @Html.LabelFor(model => model.Socialinsurance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Socialinsurance, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Socialinsurance, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="field">
            @Html.LabelFor(model => model.Medicalinsurance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Medicalinsurance, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Medicalinsurance, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="two fields">
        <div class="field">
            @Html.LabelFor(model => model.Taxes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Taxes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Taxes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="field">
            @Html.LabelFor(model => model.Dedecation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Dedecation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Dedecation, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="two fields">
        <div class="field">
            @Html.LabelFor(model => model.TotalDedecated, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.TotalDedecated, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.TotalDedecated, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="field">
            @Html.LabelFor(model => model.NetSalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.NetSalary, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.NetSalary, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="two fields">
        <div class="field">
            @Html.LabelFor(model => model.OperationDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="ui input">
                @Html.EditorFor(model => model.OperationDate, new { htmlAttributes = new { @class = "form-control form-control-inline date-picker" } })
                @Html.ValidationMessageFor(model => model.OperationDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="field">
            @Html.LabelFor(model => model.IsPaid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsPaid)
                    @Html.ValidationMessageFor(model => model.IsPaid, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
 
        <div class="actions">
            <button type="submit" class="ui primary button " name="cmd"> @GeneralResource.Edit</button>
            <button type="button" class="ui deny button" data-dismiss="modal">@*<i class="fa fa-times"></i>*@&nbsp;@GeneralResource.Close</button>

        </div>

        }



        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }



        <script>

            function InitC() {
                $('.date-picker').datepicker({
                    format: 'yyyy/mm/dd'
                });

            };
            InitC();

        </script>

        <script>

            $('#BasicSalary,#AdditionalSalary,#AllowanceSalary,#BonusesSalary,#extraSalary').keyup(function () {

                var sumTotalSalary = parseInt("0" + $('#BasicSalary').val()) + parseInt("0" + $('#AdditionalSalary').val()) + parseInt("0" + $('#AllowanceSalary').val()) + parseInt("0" + $('#BonusesSalary').val()) + parseInt("0" + $('#extraSalary').val());

                $('#TotalSalary').val(sumTotalSalary);
                var sumNetSalary = parseInt("0" + $('#TotalSalary').val()) - parseInt("0" + $('#TotalDedecated').val());
                $('#NetSalary').val(sumNetSalary);

            });

        </script>

        <script>

            $('#Socialinsurance,#Medicalinsurance,#Taxes,#Dedecation').keyup(function () {

                var sumTotalDedecated = parseInt("0" + $('#Socialinsurance').val()) + parseInt("0" + $('#Medicalinsurance').val()) + parseInt("0" + $('#Taxes').val()) + parseInt("0" + $('#Dedecation').val());

                $('#TotalDedecated').val(sumTotalDedecated);
                var sumNetSalary = parseInt("0" + $('#TotalSalary').val()) - parseInt("0" + $('#TotalDedecated').val());
                $('#NetSalary').val(sumNetSalary);

            });

        </script>
